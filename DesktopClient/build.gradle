/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    //Javafx plugin for use of JavaFX and FXML
    id 'org.openjfx.javafxplugin' version '0.0.10'

    //PMD console output
    id 'pmd'

    //Project Lombok
    id "io.freefair.lombok" version "6.2.0"

    //Jacoco testing
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    //Gson dependency
    implementation 'com.google.code.gson:gson:2.8.6'

    //Json dependency
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    //Flogger for logging

    // https://mvnrepository.com/artifact/com.google.flogger/flogger
    implementation 'com.google.flogger:flogger:0.7.1'


}

application {
    // Define the main class for the application.
    mainClass = 'DesktopClient.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    //Use Jacoco
    finalizedBy jacocoTestReport // report is always generated after tests run
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml']
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    rulesMinimumPriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('JacocoTestCoverage')
}
test{
    useJUnitPlatform()
    finalizedBy jacocoTestReport;

}
jacocoTestReport {
    dependsOn test
    reports{
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
    afterEvaluate{
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [

            ])
        }))
    }
}

test.finalizedBy(project.tasks.jacocoTestReport);
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

        }

    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
    }
}