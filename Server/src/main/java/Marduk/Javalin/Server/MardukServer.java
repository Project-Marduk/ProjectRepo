/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Marduk.Javalin.Server;

import DrawingBoard.InputBoard;
import FactoryElements.InputObject;
import Marduk.Javalin.Server.DataManager.DataManagerDriver;
import Marduk.Javalin.Server.FileExporter.FileExporterDriver;
import Server.Connection.serverRequestHeader;
import Server.Resources.ServerPorts;
import Server.ResponseManagement.ResponseManager;
import Server.ResponseManagement.ServerResponses;
import Server.Resources.ApiCommands;
import io.javalin.Javalin;
import io.javalin.http.HandlerType;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;


import java.util.Objects;

/**
 * The Info Manager Server
 *
 * @author Traae
 * @version 0.1.0
 */
public class MardukServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = ServerPorts.Server.port();

    public static void main(String[] args) {

        ResponseManager responseManager = ResponseManager.instance(ServerResponses.startingServerResponse);

        DataManagerDriver dataManager = DataManagerDriver.getInstance();
        dataManager.setResponseManager(responseManager);

        FileExporterDriver fileExporter = FileExporterDriver.getInstance();
        fileExporter.setResponseManager(responseManager);




        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(ServerPorts.Server.port());

        // Server Handlers
        // Basic info calls

        app.addHandler(
                HandlerType.GET,
                ApiCommands.root,
                ctx -> ctx.result(ServerResponses.startingServerResponse.getMessage())
        );
        app.addHandler(HandlerType.GET,
                ApiCommands.up,
                ctx -> ctx.result(ServerResponses.upResponse.getMessage())
        );
        app.addHandler(
                HandlerType.GET,
                ApiCommands.getResponseCode,
                ctx -> ctx.status(responseManager.getCode())
        );
        app.addHandler(
                HandlerType.GET,
                ApiCommands.getResponseMessage,
                ctx -> ctx.result(responseManager.getMessage())
        );
        app.addHandler(
                HandlerType.GET,
                ApiCommands.getResponseBoolean,
                ctx -> ctx.result(String.valueOf(responseManager.isSuccess()))
        );



        // DATA MANAGER CALLS

        // Before and After Data manager
        app.addHandler(HandlerType.BEFORE, ApiCommands.dataManager+"/*",
                ctx -> {
            responseManager.operationInitiated();
            dataManager.openDatabase();
        });
        app.addHandler(HandlerType.AFTER,ApiCommands.dataManager+"/*",
                ctx -> {
            dataManager.closeDatabase();
        });

        // DrawingBoard Commands
        app.addHandler(HandlerType.POST, ApiCommands.saveDrawingBoard, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                InputBoard input = ctx.bodyAsClass(InputBoard.class);
                // TODO plugin the seve function here

                responseManager.setResponseBySuccess(false);
            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            }// TODO return the return
            ctx.result(String.valueOf(responseManager.getCode()));
        });


        app.addHandler(HandlerType.POST, ApiCommands.getDrawingBoard, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                String drawingboardID = ctx.body();
                // TODO plugin the the get function here
                // TODO return the return
                responseManager.setResponseBySuccess(false);

            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            };
            ctx.result(String.valueOf(responseManager.getCode()));
        });


        // - Drawing Object Commands
        app.addHandler(HandlerType.POST, ApiCommands.createDrawingObject, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                InputObject input = ctx.bodyAsClass(InputObject.class);
                // TODO plugin the create function here
                // TODO return the return
                responseManager.setResponseBySuccess(false);

            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            };
            ctx.result(String.valueOf(responseManager.getCode()));
        });

        app.addHandler(HandlerType.POST, ApiCommands.deleteDrawingObject, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                // TODO plugin the function here we using the Input of just the ID?
                //InputObject input = ctx.bodyAsClass(InputObject.class);
                //String id = ctx.body();

                // TODO return the return
                responseManager.setResponseBySuccess(false);

            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            };
            ctx.result(String.valueOf(responseManager.getCode()));
        });

        app.addHandler(HandlerType.POST, ApiCommands.updateDrawingObject, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                InputObject input = ctx.bodyAsClass(InputObject.class);
                // TODO plugin the input function here
                // TODO return the return
                responseManager.setResponseBySuccess(false);

            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            };
            ctx.result(String.valueOf(responseManager.getCode()));
        });

        // - User info Commands

        app.addHandler(HandlerType.POST, ApiCommands.registerUser, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                String username = ctx.body();
                // TODO plugin the register function here
                // TODO return the return
                responseManager.setResponseBySuccess(false);

            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            };
            ctx.result(String.valueOf(responseManager.getCode()));
        });

        app.addHandler(HandlerType.POST, ApiCommands.loginUser, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                String username = ctx.body();
                // TODO plugin the login function here
                // TODO return the return
                responseManager.setResponseBySuccess(false);

            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            };
            ctx.result(String.valueOf(responseManager.getCode()));
        });

        app.addHandler(HandlerType.GET, ApiCommands.logoutUser, ctx -> {
            String toLogout = ctx.body();
            // TODO plugin the logout function
            responseManager.setResponseBySuccess(false);
            ctx.result(String.valueOf(responseManager.getCode()));
        });

        app.addHandler(HandlerType.GET, ApiCommands.validateDatabaseConnection, ctx->{
            dataManager.validateDatabaseConnection();
            ctx.result(String.valueOf(responseManager.getCode()));
        });


        // FILE EXPORTER
        app.before(ApiCommands.fileExporter+"/*",
                ctx -> {responseManager.operationInitiated();
        });
        /**
         * Receive a diagram for rendering.
         *
         * TODO change toRender to the final Datastructure
         */
        app.addHandler(HandlerType.POST, ApiCommands.renderPNG, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                InputBoard toRender = ctx.bodyAsClass(InputBoard.class);
                ctx.json(fileExporter.renderPNG(toRender));
            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            }
        });
        /**
         * Receive a diagram for rendering.
         *
         * TODO change toRender to the final Datastructure
         */
        app.addHandler(HandlerType.POST, ApiCommands.renderSVG, ctx -> {
            if (Objects.equals(ctx.contentType(), serverRequestHeader.idOfObject)) {
                Object toRender = ctx.bodyAsClass(Object.class);
                ctx.json(fileExporter.renderSVG(toRender));
            }else {
                responseManager.setFullResponse(ServerResponses.inValidRequest);
            }
        });
    }
}
