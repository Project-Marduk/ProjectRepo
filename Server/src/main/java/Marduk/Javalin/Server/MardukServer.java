/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package IM.Javalin.Server;

import Servers.Resources.ServerMessages;
import Servers.Resources.ServerPorts;
import Servers.Resources.ServerStatuses;
import Servers.apiCommands.GeneralApi;
import Servers.apiCommands.IMapi;
import io.javalin.Javalin;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;

/**
 * The Info Manager Server
 *
 * @author Traae
 * @version 0.1.0
 */
public class IMServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = ServerPorts.InfoManager.port();



    public static void main(String[] args) {
        ServerStatuses currentStatus = ServerStatuses.allGood;
        String errorMessage = "No current error.";
        String defaultMessage = ServerMessages.IMmessage.getMessage();
        InfoManager infoManager = InfoManager.getInstance();

        
        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(ServerPorts.InfoManager.port());

        app.routes(() -> {
            // Basic info calls
            app.get(GeneralApi.root.path(), ctx -> ctx.result(defaultMessage));

            // Check status and Error message
            app.get(GeneralApi.getStatus.path(), ctx -> {
                //STATUS UPDATE FUNCTION
                ctx.result(String.valueOf(currentStatus));
            });
            app.get(GeneralApi.getError.path(), ctx -> {
                // ERROR UPDATING FUNCTION
                ctx.result(errorMessage);
            });




            app.post(IMapi.registerUser.path(), ctx -> {
                // [Database User Register and Save Function](ctx.body());
                ctx.result("Register Successful");
            });
            app.get(IMapi.loginUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });
            app.get(IMapi.getDiagram.path(), ctx -> {
                //String diagramName = ctx.body();
                // Diagram toLoad = [Database load Diagram](diagramName);
                // ctx.json(toLoad);
            });
            // Receive a diagram for save.
            app.post(IMapi.saveDiagram.path(), ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    // Diagram diagram = ctx.bodyAsClass(Diagram.class);

                    // [Database Save Diagram Function](diagram);

                    ctx.result("Save Successful");
                }*/
            });


        });

    }
}
