/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Marduk.Javalin.Server;

import Marduk.Javalin.Server.DataManager.DataManagerDriver;
import Marduk.Javalin.Server.FileExporter.FileExporterDriver;
import Server.Connection.serverRequestHeader;
import Server.Resources.ServerPorts;
import Server.Resources.ServerReturns;
import Server.Resources.ApiCommands;
import io.javalin.Javalin;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;


import java.util.Objects;

/**
 * The Info Manager Server
 *
 * @author Traae
 * @version 0.1.0
 */
public class MardukServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = ServerPorts.Server.port();

    public static void main(String[] args) {

        ServerReturns currentStatus = ServerReturns.allGood;
        String errorMessage = "No current error.";
        String defaultMessage = ServerReturns.serverMessage.message();

        //DataManagerDriver dataManager = DataManagerDriver.getInstance();
        FileExporterDriver fileExporter = FileExporterDriver.getInstance();


        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(ServerPorts.Server.port());



        app.routes(() -> {
            //Runs before each request handler
            //ensures database is properly opened and closed
            // TODO I think the datamanager should handle this.
            app.before(ctx -> {
                //dataManager.openDatabase();
            });
            app.after(ctx -> {
                //dataManager.closeDatabase();
            });

            // Basic info calls
            app.get(ApiCommands.root.path(), ctx -> ctx.result(defaultMessage));

            // Check status and Error message
            app.get(ApiCommands.getStatus.path(), ctx -> {
                //STATUS UPDATE FUNCTION
                ctx.result(String.valueOf(currentStatus));
            });
            app.get(ApiCommands.getError.path(), ctx -> {
                // ERROR UPDATING FUNCTION
                ctx.result(errorMessage);
            });




            app.post(ApiCommands.registerUser.path(), ctx -> {
                // [Database User Register and Save Function](ctx.body());
                ctx.result("Register Successful");
            });
            app.get(ApiCommands.loginUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });
            app.get(ApiCommands.logoutUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });

            app.post(ApiCommands.validateDatabaseConnection.path(), ctx->{
                ctx.result("connection success");
            });



            /**
             * Receive a diagram for rendering.
             *
             * TODO change toRender to the final Datastructure
             */
            app.post(ApiCommands.renderPNG.path(), ctx -> {
                if (Objects.equals(ctx.contentType(), serverRequestHeader.value)) {
                    Object toRender = ctx.bodyAsClass(Object.class);
                    ctx.json(fileExporter.renderPNG(toRender));
                }
            });

            /**
             * Receive a diagram for rendering.
             *
             * TODO change toRender to the final Datastructure
             */
            app.post(ApiCommands.renderSVG.path(), ctx -> {
                if (Objects.equals(ctx.contentType(), serverRequestHeader.value)) {
                    Object toRender = ctx.bodyAsClass(Object.class);
                    ctx.json(fileExporter.renderSVG(toRender));
                }
            });

        });
    }
}
