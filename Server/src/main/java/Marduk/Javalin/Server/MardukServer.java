/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Marduk.Javalin.Server;

import ActiveJDBCObjecs.DrawingBoard;
import ActiveJDBCObjecs.DrawingObject;
import FactoryElements.InputObject;
import Marduk.Javalin.Server.DataManager.DataManagerDriver;
import Server.Resources.ServerPorts;
import Server.Resources.ServerReturns;
import Server.Resources.ApiCommands;
import io.javalin.Javalin;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.javalite.activejdbc.Base;
import org.javalite.activejdbc.DB;
import org.javalite.activejdbc.LazyList;
import org.javalite.activejdbc.connection_config.DBConfiguration;

import java.util.ArrayList;

import static ActiveJDBCObjecs.JSONHandler.*;

/**
 * The Info Manager Server
 *
 * @author Traae
 * @version 0.1.0
 */
public class MardukServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = ServerPorts.Server.port();

    public static void main(String[] args) {
        start();
    }
//    public MardukServer(){
//
//    }

    public static void start(){
        ServerReturns currentStatus = ServerReturns.allGood;
        String errorMessage = "No current error.";
        String defaultMessage = ServerReturns.serverMessage.message();
        DataManagerDriver dataManagerDriver = DataManagerDriver.getInstance();


        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(ServerPorts.Server.port());



        app.routes(() -> {
            //Runs before each request handler
            //ensures database is properly opened and closed
            app.before(ctx -> {
                DBConfiguration.loadConfiguration("/database.properties");
                Base.open();
            });
            app.after(ctx -> {
                Base.close();
            });

            // Basic info calls
            app.get(ApiCommands.root.path(), ctx -> ctx.result(defaultMessage));

            // Check status and Error message
            app.get(ApiCommands.getStatus.path(), ctx -> {
                //STATUS UPDATE FUNCTION
                ctx.result(String.valueOf(currentStatus));
            });
            app.get(ApiCommands.getError.path(), ctx -> {
                // ERROR UPDATING FUNCTION
                ctx.result(errorMessage);
            });




            app.post(ApiCommands.registerUser.path(), ctx -> {
                // [Database User Register and Save Function](ctx.body());
                ctx.result("Register Successful");
            });
            app.get(ApiCommands.loginUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });
            app.get(ApiCommands.logoutUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });

            app.post(ApiCommands.validateDatabaseConnection.path(), ctx->{
                ctx.result("connection success");
            });

            //returns a JSON string of all drawing objects converted to InputObjects for the javaFX front end
            app.get(ApiCommands.getDiagram.path(), ctx -> {
                String param =  ctx.queryParam("drawing_board_id");
                String outString = "";

                DrawingBoard dwgb = DrawingBoard.findById(Integer.parseInt(param));
                ArrayList<String> outList = new ArrayList<>();

                if(dwgb != null){
                    LazyList<DrawingObject> lzDwgObj =  dwgb.getAll(DrawingObject.class); //pulls a lazy list

                    //serializes all the drawingobjects to json
                    for (DrawingObject dw : lzDwgObj) {
                        outList.add(dw.toInputObjectJSON());
                    }
                }
                else{
                    outString = "id not found";
                }
                outString = arrayListToJSON(outList);

                //returns svg data with wrappers
                ctx.result(outString);

                //String diagramName = ctx.body();
                // Diagram toLoad = [Database load Diagram](diagramName);
                // ctx.json(toLoad);
            });
            // Receive a diagram for save.
            app.post(ApiCommands.saveDiagram.path(), ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    // Diagram diagram = ctx.bodyAsClass(Diagram.class);

                    // [Database Save Diagram Function](diagram);

                    ctx.result("Save Successful");
                }*/
            });

            // Receive a diagram for rendering.
            app.post(ApiCommands.renderPNG.path(), ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    Diagram d = ctx.bodyAsClass(Diagram.class);

                    // then we return the result
                    // we can do this one for 3 ways
                    // 1. Return a byte array holding the png's data, and the client can write that to a file
                    // 2. we can use a stream
                    // see: https://javalin.io/archive/docs/v2.8.0.html#context

                    // Using a stream to pass a file seems the most professional.

                    // what ever we choose, we put the FileExporter function into ctx.result( HERE );

                    ctx.result();
                }*/
            });
            app.post(ApiCommands.renderSVG.path(), ctx -> {
                String param = ctx.queryParam("drawing_board_id");

                DrawingBoard db = DrawingBoard.findById(Integer.parseInt(param));
                LazyList<DrawingObject> lzDwgObj =  db.getAll(DrawingObject.class); //pulls a lazy list
                String outString = "";

                for (DrawingObject dw : lzDwgObj) {
                    outString += dw.getSVGData();
                }

                //returns svg data with wrappers
                ctx.result(outString);

//                try{
//                    ctx.result(outString);
//                }
//                catch(IndexOutOfBoundsException e){
//
//                }



                /*
                if (Objects.equals(ctx.contentType(), "application/json")) {
                    Diagram diagram = ctx.bodyAsClass(Diagram.class);

                    // Same as the above function, but we could also pass the whole body of the SVG
                    // as a string and have the client write that to a file.

                    // Once again, using a stream to

                    ctx.result( );

                }
                */
            });

            app.post(ApiCommands.createDrawingObject.path(), ctx -> {
                //adds a drawing object to the drawing object table
                String param = ctx.queryParam("inputobjectjson");

                InputObject inObj;

                try{
                    inObj = inputObjectFromJSON(param);
                }
                catch(Exception e){
                    inObj = null;
                }

                //checks if JSON was correctly parsed
                if(inObj != null){
                    Double p1;
                    Double p2 = null;
                    String t1;
                    String t2 = null;
                    String t3 = null;

                    if(inObj.getParams().length == 1){
                        p1 = inObj.getParams()[0];
                    }
                    else{
                        p1 = inObj.getParams()[0];
                        p2 = inObj.getParams()[1];
                    }

                    if(inObj.getText().length == 1){
                        t1 = inObj.getText()[0];
                    }
                    else if(inObj.getText().length == 2){
                        t1 = inObj.getText()[0];
                        t2 = inObj.getText()[1];
                    }
                    else{
                        t1 = inObj.getText()[0];
                        t2 = inObj.getText()[1];
                        t3 = inObj.getText()[2];
                    }

                    //using createIt
//                    DrawingObject dw = DrawingObject.createIt(inObj.getParent_id(), inObj.getShapeType(), //inObj.getParent_id() update this once parent id is added
//                            inObj.getXCord(), inObj.getYCord(), p1, p2, inObj.getColor(), inObj.getStyle(),
//                            inObj.getFill(), t1, t2, t3);
//                    dw.saveIt();

                    //explicity way to set variables
                    DrawingObject dwgObj = new DrawingObject();
//                    dwgObj.set("id", inObj.getId());
                    dwgObj.set("drawing_board_id", inObj.getParent_id());
                    dwgObj.set("shape_type", inObj.getShapeType());
                    dwgObj.set("x_cord", inObj.getXCord());
                    dwgObj.set("y_cord", inObj.getYCord());
                    dwgObj.set("param_one", p1);
                    dwgObj.set("param_two", p2);
                    dwgObj.set("color", inObj.getColor());
                    dwgObj.set("style", inObj.getStyle());
                    dwgObj.set("fill", inObj.getFill());
                    dwgObj.set("text_one", t1);
                    dwgObj.set("text_two", t2);
                    dwgObj.set("text_three", t3);
                    dwgObj.saveIt();
                }
                else{
                    ctx.result("input object was unable to be correctly parsed from JSON");
                }

                //test
                //object creation that takes in a json and attempts to make it an object
                //check beekeeper to validate
                //

            });
            //deletes a drawing object from the drawing object table based on its unique id
            app.post(ApiCommands.deleteDrawingObject.path(), ctx -> {
                String param = ctx.queryParam("drawing_object_id");
                DrawingObject dwgObj = DrawingObject.findById(Integer.parseInt(param));
                //catches entry cannot be found
                if(dwgObj != null){
                    dwgObj.delete();
                }
                else{
                    ctx.result("no drawing object with id " + Integer.parseInt(param));
                }
            });

            app.post(ApiCommands.updateDrawingObject.path(), ctx ->{
                String param = ctx.queryParam("inputobjectjson");

                InputObject inObj;

                try{
                    inObj = inputObjectFromJSON(param);
                }
                catch(Exception e){
                    inObj = null;
                }

                //checks if JSON was correctly parsed
                if(inObj != null){
                    Double p1;
                    Double p2 = null;
                    String t1;
                    String t2 = null;
                    String t3 = null;

                    if(inObj.getParams().length == 1){
                        p1 = inObj.getParams()[0];
                    }
                    else{
                        p1 = inObj.getParams()[0];
                        p2 = inObj.getParams()[1];
                    }

                    if(inObj.getText().length == 1){
                        t1 = inObj.getText()[0];
                    }
                    else if(inObj.getText().length == 2){
                        t1 = inObj.getText()[0];
                        t2 = inObj.getText()[1];
                    }
                    else{
                        t1 = inObj.getText()[0];
                        t2 = inObj.getText()[1];
                        t3 = inObj.getText()[2];
                    }

                    //updates the drawing object and saves it
                    DrawingObject dwgObj = DrawingObject.findById(inObj.getId());

                    if(dwgObj != null){
                        dwgObj.set("drawing_board_id", inObj.getParent_id());
                        dwgObj.set("shape_type", inObj.getShapeType());
                        dwgObj.set("x_cord", inObj.getXCord());
                        dwgObj.set("y_cord", inObj.getYCord());
                        dwgObj.set("param_one", p1);
                        dwgObj.set("param_two", p2);
                        dwgObj.set("color", inObj.getColor());
                        dwgObj.set("style", inObj.getStyle());
                        dwgObj.set("fill", inObj.getFill());
                        dwgObj.set("text_one", t1);
                        dwgObj.set("text_two", t2);
                        dwgObj.set("text_three", t3);
                        dwgObj.saveIt();
                    }
                    else{
                        ctx.result("no drawing object with given id found");
                    }

                }
                else{
                    ctx.result("input object was unable to be correctly parsed from JSON");
                }
            });

            //We are setting all of our drawing boards to a default size so we dont need any inputs
            app.post(ApiCommands.createDrawingBoard.path(), ctx ->{
               DrawingBoard dwgb = new DrawingBoard();
               dwgb.set("x_size", 1000);
               dwgb.set("y_size", 1000);
               dwgb.saveIt();
            });

            app.post(ApiCommands.deleteDrawingBoard.path(), ctx ->{
//                String param = ctx.queryParam("drawing_board_id");
//                DrawingBoard.delete(param);

                String param = ctx.queryParam("drawing_board_id");
//                System.out.println(param);
                DrawingBoard dwgb = DrawingBoard.findById(Integer.parseInt(param));
//                System.out.println(dwgb.get("x_cord"));
                //catches entry cannot be found
                if(dwgb != null){
                    dwgb.delete();
                }
                else{
                    ctx.result("no drawing board with id " + Integer.parseInt(param));
                }
            });

//            app.post(ApiCommands.updateDrawingBoard.path(), ctx -> {
//                String param = ctx.queryParam("drawingboardjson");
//                DrawingBoard inDwgBrd;//= DrawingBoard.findById(param);
//                try{
//                    inDwgBrd = drawingBoardFromJSON(param);
//                }
//                catch(Exception e){
//                    inDwgBrd = null;
//                }
//
//                if(inDwgBrd != null){
//
//                    DrawingBoard dwgb = DrawingBoard.findById(inDwgBrd.getInteger("id"));
//                    System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!11");
//                    System.out.println(inDwgBrd.getInteger("id"));
//                    System.out.println(inDwgBrd.toString());
//                    if(dwgb != null){
//                        dwgb.set("x_size", inDwgBrd.get("x_cord"));
//                        dwgb.set("y_size", inDwgBrd.get("y_cord"));
//                    }
//                    else{
//                        ctx.result("cannot find drawing board with same id");
//                    }
//                }
//                else{
//                    ctx.result("cannot parse object from JSON");
//                }
//
//            });


        });
    }
}
