/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Marduk.Javalin.Server;

import Marduk.Javalin.Server.DataManager.DataManagerDriver;
import Server.Resources.ServerPorts;
import Server.Resources.ServerReturns;
import Server.Resources.ApiCommands;
import io.javalin.Javalin;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;

/**
 * The Info Manager Server
 *
 * @author Traae
 * @version 0.1.0
 */
public class MardukServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = ServerPorts.Server.port();



    public static void main(String[] args) {
        ServerReturns currentStatus = ServerReturns.allGood;
        String errorMessage = "No current error.";
        String defaultMessage = ServerReturns.serverMessage.message();
        DataManagerDriver dataManagerDriver = DataManagerDriver.getInstance();

        
        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(ServerPorts.Server.port());

        app.routes(() -> {
            // Basic info calls
            app.get(ApiCommands.root.path(), ctx -> ctx.result(defaultMessage));

            // Check status and Error message
            app.get(ApiCommands.getStatus.path(), ctx -> {
                //STATUS UPDATE FUNCTION
                ctx.result(String.valueOf(currentStatus));
            });
            app.get(ApiCommands.getError.path(), ctx -> {
                // ERROR UPDATING FUNCTION
                ctx.result(errorMessage);
            });




            app.post(ApiCommands.registerUser.path(), ctx -> {
                // [Database User Register and Save Function](ctx.body());
                ctx.result("Register Successful");
            });
            app.get(ApiCommands.loginUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });
            app.get(ApiCommands.logoutUser.path(), ctx -> {
                // toLogin = [Database User Load](ctx.body());
                // InfoManager UserLogin( toLogin );
                // ctx.result("Login Succefull");
            });


            app.get(ApiCommands.getDiagram.path(), ctx -> {
                //String diagramName = ctx.body();
                // Diagram toLoad = [Database load Diagram](diagramName);
                // ctx.json(toLoad);
            });
            // Receive a diagram for save.
            app.post(ApiCommands.saveDiagram.path(), ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    // Diagram diagram = ctx.bodyAsClass(Diagram.class);

                    // [Database Save Diagram Function](diagram);

                    ctx.result("Save Successful");
                }*/
            });

            // Receive a diagram for rendering.
            app.post(ApiCommands.renderPNG.path(), ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    Diagram d = ctx.bodyAsClass(Diagram.class);

                    // then we return the result
                    // we can do this one for 3 ways
                    // 1. Return a byte array holding the png's data, and the client can write that to a file
                    // 2. we can use a stream
                    // see: https://javalin.io/archive/docs/v2.8.0.html#context

                    // Using a stream to pass a file seems the most professional.

                    // what ever we choose, we put the FileExporter function into ctx.result( HERE );

                    ctx.result();
                }*/
            });
            app.post(ApiCommands.renderSVG.path(), ctx -> {
                /*
                if (Objects.equals(ctx.contentType(), "application/json")) {
                    Diagram diagram = ctx.bodyAsClass(Diagram.class);

                    // Same as the above function, but we could also pass the whole body of the SVG
                    // as a string and have the client write that to a file.

                    // Once again, using a stream to

                    ctx.result( );

                }
                */
            });


        });

    }
}
