/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package IM.Javalin.Server;

import io.javalin.Javalin;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;

public class IMServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = 7002;



    public static void main(String[] args) {
        String defaultMessage ="This is the File Exporter Server";
        String apiInfo = "This api is for the File Exporter Microservice. \n" +
                "We can return to you a png of svg file, made from a  Diagram Json file.\n" +
                "COMMAND LIST:";

        InfoManager infoManager = InfoManager.getInstance();

        
        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(DEFAULT_PORT);

        app.routes(() -> {
            // Basic info calls
            app.get( "/", ctx -> ctx.result(defaultMessage));
            app.get("/api", ctx -> ctx.result(apiInfo));

            // Check status and Error message
            app.get("/api/get/status", ctx -> ctx.result("0"/* CALL FileExporter . get current status code ()*/));
            app.get("/api/get/error", ctx -> ctx.result("All good"/* CALL FileExporter . get error message ()*/));


            // Receive a diagram for rendering.
            app.post("/api/post/render/png", ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    Diagram d = ctx.bodyAsClass(Diagram.class);

                    // then we return the result
                    // we can do this one for 3 ways
                    // 1. Return a byte array holding the png's data, and the client can write that to a file
                    // 2. we can use a stream
                    // see: https://javalin.io/archive/docs/v2.8.0.html#context

                    // Using a stream to pass a file seems the most professional.

                    // what ever we choose, we put the FileExporter function into ctx.result( HERE );

                    ctx.result();
                }*/
            });
            app.post("/api/post/render/svg", ctx -> {
                /*
                if (Objects.equals(ctx.contentType(), "application/json")) {
                    Diagram diagram = ctx.bodyAsClass(Diagram.class);

                    // Same as the above function, but we could also pass the whole body of the SVG
                    // as a string and have the client write that to a file.

                    // Once again, using a stream to

                    ctx.result( );

                }
                */
            });

        });

    }
}
