/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DC.Javalin.Server;

import DC.Javalin.Server.DiagramComposer;
import io.javalin.Javalin;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.thread.QueuedThreadPool;

/**
 * This is the server for the Diagram Composer Microservice.
 *
 * @author Traae
 * @version 0.1.0
 */
public class DCServer {
    private static final int MAX_THREADS = 20;
    private static final int MIN_THREADS = 2;
    private static final int TIMEOUT = 60000;
    private static final int DEFAULT_PORT = 7000;



    public static void main(String[] args) {
        String defaultMessage ="This is the Diagram Composer Server";
        String apiInfo = "This api is for the Diagram Composer Microservice. \n" +
                "We can return to you a png of svg file, made from a  Diagram Json file.\n" +
                "COMMAND LIST:";

        DiagramComposer diagramComposer = DiagramComposer.getInstance();


        QueuedThreadPool queuedThreadPool = new QueuedThreadPool(MAX_THREADS, MIN_THREADS,TIMEOUT);
        Javalin app = Javalin.create(config ->
                config.server(() ->
                        new Server(queuedThreadPool))).start(DEFAULT_PORT);

        app.routes(() -> {
            // DUE TO MERGE ISSUES my work was deleted AGAIN.
            // It's fine, but ignore what is present below. I'll work it out as I do the composer.


            // Basic info calls
            app.get( "/", ctx -> ctx.result(defaultMessage));
            app.get("/api", ctx -> ctx.result(apiInfo));

            // Check status and Error message
            app.get("/api/get/status", ctx -> ctx.result("0"/* CALL FileExporter . get current status code ()*/));
            app.get("/api/get/error", ctx -> ctx.result("All good"/* CALL FileExporter . get error message ()*/));


            // Receive a diagram for rendering.
            app.post("/api/post/diagram", ctx -> {
                /*
                NOTE: I still do not full understand this conditional,
                specificly "application/json"

                if (Objects.equals(ctx.contentType(), "application/json")) {
                    // we make a diagram out of the diagram json that was sent to us.
                    Diagram d = ctx.bodyAsClass(Diagram.class);

                    ctx.result();
                }*/
            });
            app.get("/api/get/diagram", ctx -> {
                //ctx.json();
            });

        });

    }
}
